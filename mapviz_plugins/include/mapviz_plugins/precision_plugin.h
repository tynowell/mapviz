#ifndef MAPVIZ_PLUGINS_PRECISION_PLUGIN_H_
#define MAPVIZ_PLUGINS_PRECISION_PLUGIN_H_

#include <mapviz/mapviz_plugin.h>
#include <mapviz/map_canvas.h>

// C++ standard libraries
#include <string>
#include <list>

// QT libraries
#include <QGLWidget>
#include <QObject>
#include <QWidget>

// GDAL
#include <gdal/ogrsf_frmts.h>

// ROS libraries
#include <ros/ros.h>
#include <opencv/highgui.h>
#include <cv_bridge/cv_bridge.h>

#include <std_msgs/String.h>
#include <sensor_msgs/NavSatFix.h>
#include <swri_transform_util/local_xy_util.h>
#include <swri_geometry_util/geometry_util.h>

// QT autogenerated files
#include "ui_precision_config.h"
#include "ui_topic_select.h"

namespace mapviz_plugins
{
  struct Polygon {
    std::string name;
    std::vector<cv::Vec2d> polygon;
  };

  class PrecisionPlugin : public mapviz::MapvizPlugin
  {
    Q_OBJECT

  public:
    enum Anchor {
      TOP_LEFT,
      TOP_CENTER,
      TOP_RIGHT,
      CENTER_LEFT,
      CENTER,
      CENTER_RIGHT,
      BOTTOM_LEFT,
      BOTTOM_CENTER,
      BOTTOM_RIGHT
    };

    enum Units {PIXELS, PERCENT};

    PrecisionPlugin();
    virtual ~PrecisionPlugin();

    bool Initialize(QGLWidget* canvas);
    void Shutdown() {}

    void Draw(double x, double y, double scale);
    void Transform();

    void LoadConfig(const YAML::Node& node, const std::string& path);
    void SaveConfig(YAML::Emitter& emitter, const std::string& path);

    QWidget* GetConfigWidget(QWidget* parent);

  protected:
    void PrintError(const std::string& message);
    void PrintInfo(const std::string& message);
    void PrintWarning(const std::string& message);

  protected Q_SLOTS:
    void SelectFile();
    void FileEdited();

    void SelectTopic();
    void TopicEdited();

  private:
    Ui::precision_config ui_;
    QWidget* config_widget_;

    std::string topic_;
    std::string shapefile_;
    std::string imagefile_;

    std::list<Polygon> zones_;

    bool initialized_;
    bool has_message_;

    double last_width_;
    double last_height_;
    double original_aspect_ratio_;

    ros::NodeHandle nh_;
    ros::Subscriber navsat_sub_;
    ros::Publisher state_pub_;

    void NavSatFixCallback(const sensor_msgs::NavSatFixConstPtr navsat);
    std::vector<cv::Vec2d> StringToPolygon(std::string polygon);
  };
}

#endif
